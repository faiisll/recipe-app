{"version":3,"sources":["Recipe.js","Search.js","App.js","serviceWorker.js","index.js"],"names":["Recipe","title","img","ingredients","calories","className","src","alt","map","ingr","text","Search","props","onSubmit","e","preventDefault","setQuery","search","type","value","onChange","setSearch","target","placeholder","App","useState","recipes","setRecepices","query","useEffect","getRecipe","a","fetch","resp","json","data","count","hits","alert","recipe","key","label","image","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kTAuBeA,G,MApBA,SAAC,GAAyC,IAAxCC,EAAuC,EAAvCA,MAAOC,EAAgC,EAAhCA,IAAeC,GAAiB,EAA3BC,SAA2B,EAAjBD,aACnC,OACI,yBAAKE,UAAU,UACX,yBAAKA,UAAU,aACf,yBAAKC,IAAKJ,EAAKK,IAAI,KAEnB,yBAAKF,UAAU,QACX,4BAAI,gCAASJ,IACb,6BACA,4BACKE,EAAYK,KAAK,SAAAC,GAAI,OAClB,4BAAKA,EAAKC,eCUnBC,G,MApBA,SAAAC,GAYX,OACI,0BAAMC,SANQ,SAAAC,GACdA,EAAEC,iBACFH,EAAMI,SAASJ,EAAMK,SAIMZ,UAAU,cACjC,2BAAOA,UAAU,YAAYa,KAAK,OAAOC,MAAOP,EAAMK,OAAQG,SAXjD,SAAAN,GACjBF,EAAMS,UAAUP,EAAEQ,OAAOH,QAUiEI,YAAY,YAClG,4BAAQlB,UAAU,eAAea,KAAK,UAAtC,aCiCGM,G,YA9CH,WAEV,IAFgB,EAIgBC,mBAAS,IAJzB,mBAITC,EAJS,KAIAC,EAJA,OAKYF,mBAAS,IALrB,mBAKTR,EALS,KAKDI,EALC,OAMUI,mBAAS,WANnB,mBAMTG,EANS,KAMFZ,EANE,KAQhBa,qBAAU,WACRC,MACC,CAACF,IAEJ,IAAME,EAAS,uCAAG,8BAAAC,EAAA,sEACGC,MAAM,mCAAD,OAAoCJ,EAApC,mBAXX,WAWW,oBAVV,qCASE,cACVK,EADU,gBAEGA,EAAKC,OAFR,QAEVC,EAFU,QAGRC,MAAQ,EACdT,EAAaQ,EAAKE,MAElBC,MAAM,oBAAD,OAAqBV,EAArB,gBANS,2CAAH,qDAYf,OACE,yBAAKvB,UAAU,OACb,kBAAC,EAAD,CACEY,OAAQA,EACRD,SAAUA,EACVK,UAAWA,IAIZK,EAAQlB,KAAI,SAAA+B,GAAM,OACjB,kBAAC,EAAD,CACEC,IAAKD,EAAOA,OAAOnC,SACnBH,MAAOsC,EAAOA,OAAOE,MACrBtC,YAAaoC,EAAOA,OAAOpC,YAC3BD,IAAKqC,EAAOA,OAAOG,MACnBtC,SAAUmC,EAAOA,OAAOnC,iBCjCduC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.dc87aa7e.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Recipe.css';\r\n\r\nconst Recipe = ({title, img, calories, ingredients}) => {\r\n    return(\r\n        <div className=\"Recipe\">\r\n            <div className=\"Container\">\r\n            <img src={img} alt=\"\"/>\r\n            \r\n            <div className=\"Desc\">\r\n                <h2><strong>{title}</strong></h2>\r\n                <hr></hr>\r\n                <ul>\r\n                    {ingredients.map( ingr => (\r\n                        <li>{ingr.text}</li>\r\n                    ))}\r\n                </ul>\r\n            </div>\r\n            </div>            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Recipe;","import React from 'react';\r\nimport './Search.css';\r\n\r\n\r\nconst Search = props => {\r\n    \r\n    \r\n    const updateSearch = e =>{\r\n        props.setSearch(e.target.value);\r\n    }\r\n    \r\n    const getSearch = e =>{\r\n        e.preventDefault();\r\n        props.setQuery(props.search);\r\n    }\r\n\r\n    return(\r\n        <form onSubmit={getSearch} className=\"searchForm\">\r\n            <input className=\"searchBar\" type=\"text\" value={props.search} onChange={updateSearch} placeholder=\"Chicken\"/>\r\n            <button className=\"searchButton\" type=\"submit\">Search</button>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default Search;","import React, {useEffect, useState} from 'react';\nimport Recipe from './Recipe';\nimport Search from './Search';\nimport './App.css';\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nconst App = () => {\n\n  const APP_ID = \"c1a5d863\";\n  const APP_KEY = \"c3ec708044c06c8ff663ffc2726ddafc\";\n  const [recipes, setRecepices] = useState([]);\n  const [search, setSearch] = useState('');\n  const [query, setQuery] = useState('chicken');\n  \n  useEffect(() => {\n    getRecipe();\n  }, [query]);\n\n  const getRecipe = async () => {\n    const resp = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`);\n    const data = await resp.json();\n    if(data.count > 0){\n      setRecepices(data.hits);\n    }else{\n      alert(`What you serach \"${query}\" not found`);\n    }\n    \n  }\n\n\n  return (\n    <div className=\"App\">\n      <Search\n        search={search}\n        setQuery={setQuery}\n        setSearch={setSearch}\n      />\n\n      \n      {recipes.map(recipe => (\n        <Recipe \n          key={recipe.recipe.calories}\n          title={recipe.recipe.label}\n          ingredients={recipe.recipe.ingredients}\n          img={recipe.recipe.image}\n          calories={recipe.recipe.calories}  \n        />\n      ))}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}